# Getting Started {#sec-getting-started}

## Getting Started with R {#sec-getting-started-R}

::: {.callout-tip title="TL;DR What you Need" collapse="true"}
To work with `R` in this course, you need to be able to run `R` code, mix it with prose and formulas in a notebook-style environment, and turn program and output into pdf and html files. To accomplish this you will need

-   **`R`**. Download from [CRAN](https://cran.rstudio.com/)

-   **RStudio**. Download RStudio Desktop from [Posit](https://posit.co/downloads/)

-   **LaTex**. [TinyTeX](https://yihui.org/tinytex/) is a small distribution based on Tex Live that works well with `R` and can be manipulated through the `tinytex` `R` package.

You can skip `R` and RStudio installs if you do the work in a [Posit Cloud](https://posit.cloud/) account. These are available for free [here](https://posit.cloud/plans/free).
:::

To get started with `R` as a statistical programming language you need access to `R` itself and a development environment from which to submit `R` code.

Download `R` for your operating system from the [CRAN](https://cran.rstudio.com/) site. CRAN is the "Comprehensive R Archive Network" and also serves as the package management system to add new packages to your installation.

If you use VS Code as a development environment, add the "R Extension for Visual Studio" to your environment. We are focusing on RStudio as a development environment here.

### Posit Cloud

In today's cloud world, you can get both through [Posit Cloud](https://posit.cloud/). Posit is the company behind RStudio, Quarto, and other cool tools. Their cloud offering gives you access to an RStudio instance in the cloud. You can sign up for a free account [here](https://posit.cloud/plans/free). The only drawback of the free account is its limitations in terms of RAM, CPU, execution time, etc. For the work you will be doing in this course, and probably many other courses, you will not exceed the limitations of the free account.

Once you have created an account, the workspace is organized the same way as a RStudio session on your desktop.

### R and RStudio

RStudio is an integrated development environment (IDE) for `R`, but supports other languages as well. For example, using Quarto in RStudio, you can mix `R`, Python, and other code within the same document. Download Rstudio Desktop [here](https://posit.co/downloads/).

The RStudio IDE is organized in panes, each pane can have multiple tabs (@fig-rstudio-ide). The important panes are

-   **Source**. The files you edit. These can be R files (.R), Rmarkdown (.Rmd), Quarto (.qmd), or any other text files.

-   **Console**. Here you can enter `R` commands directly at the command prompt "\>". This pane also has a `Terminal` tab for an OS terminal and a `Background Jobs` tab. The latter is important when you knit documents into pdf or html format.

-   **Envitonment**. Displays information about the objects created in the `R` session. You can click on an object for a more detailed look at it in the `Viewer`.

-   **Help**. This pane contains many useful tabs, such as a File browse, package information, access to the documentation and help system. Plots generated from the `Console` or from an `R` script are displayed in the `Plots` tab of this pane.

![RStudio IDE](images/RStudio.png){#fig-rstudio-ide .lightbox fig-align="center" width="90%"}

### Package Management

The `R` installation comes with attached base packages, you do not need to install or load those. Any other packages are enabled in a two-step process:

1.  Install the package
2.  Load the package in your `R` session with the `library()` command.

Installing the package is done once, this step adds the package to your system. Loading the library associated with the package needs to be done in every `R` session. Without loading the library, `R` cannot find the functions exported by the library.

#### Installing standard packages

A **standard** `R` package is made available through the [CRAN](https://cran.r-project.org/) (Comprehensive R Archive Network) repositories. To install package "foo" from CRAN use

```{r eval=FALSE}
install.packages("foo")
```

To install multiple packages, specify them as a character vector:

```{r eval=FALSE}
install.packages(c("foo","bar","foobar"))
```

To uninstall (remove) one or more packages from a system, use the

```{r eval=FALSE}
remove.packages(c("foo","bar"))
```

command.

Packages are installed by default into the directory given as the first element of the `.libPaths()` function. On my Mac this is

```{r}
.libPaths()[1]
```

If you wish to install a package in a different location, provide the location in the `lib=""` argument of `install.packages()`. Note that if you use a non-default location for the package install you need to specify that location when you load the library with the `library` command.

To make the functionality in a package available to your `R` session, use the library command. For example, the following statements make the `dplyr` and `Rfast` functions available.

```{r, warning=FALSE, message=FALSE}
library("dplyr")
library("Rfast")
```

Libraries export functions into the `R` name space and sometimes these can collide. For example, the `Rfast` package exports functions `knn` and `knn.cv` for $k$-nearest neighbor and cross-validated $k$-nearest neighbor analysis. Functions by the same name also exist in the `class` package. To make it explicit which function to use, prepend the function name with the package name:

```{r eval=FALSE}
Rfast::knn()

class::knn.cv()
```

To load a library from a non-standard location, for example, when you installed the package in a special directory by using `lib=` on `install.packages()`, you need to specify the `lib.loc=""` option in the `library` command.

```{r eval=FALSE}
install.packages("some_package_name", lib="/custom_path/to/packages/")

library("some_package_name", lib.loc="/custom_path/to/packages/")
```

All available packages in your `R` environment can be seen with the

```{r eval=FALSE}
library() 
```

command.

Libraries have dependencies and if you want to install all libraries that a given one depends on, choose `dependencies=TRUE` in the `install.packages()` call:

```{r eval=FALSE}
install.packages("randomForest", dependencies=TRUE)
```

#### Installing non-standard packages

A package that is not served by the CRAN repository cannot be installed with `install.packages()`. The need for this might arise when you want to install a developer-modified version of a package before it lands on CRAN. This can be accomplished with the `devtools` package. The following statements install "some_package" from GitHub.

```{r eval=FALSE}
library("devtools")
devtools::install_github("some_package")
```

Once a non-standard package is installed you load it into a session in the same way as a standard package, with the `library` command.

You can see all packages installed on your system with

```{r eval=FALSE}
as.vector(installed.packages()[,"Package"])
```

and the packages loaded into your workspace with

```{r}
(.packages())
```

A more detailed breakdown of the packages in groups, along with other information about the session, is available from `sessionInfo()`.

As you write more `R` code and add packages to your system, you will ask yourself "Did I not install that previously?" The following code snippet helps to install only those packages from a list that are not already installed.

```{r}
libs_to_load <- c("dplyr", "readr", "magrittr","reshape2","ggplot2")
libs_to_install <- libs_to_load[!libs_to_load %in% installed.packages()]
for (lib in libs_to_install) install.packages(lib, dependencies=TRUE)
sapply(libs_to_load, library, character=TRUE)
```

#### Unloading a library

The easiest way to unload the libraries you loaded in an `R` session is to restart the session. ðŸ˜Š

To unload a library from an `R` session you can use the `detach` function with the `unload=TRUE` option. For example, to remove the `randomForest` library without restarting the session:

```{r eval=FALSE}
detach("package:randomForest",unload=TRUE)
```

### Session Information

It is a good practice to add at the end of `R` programs a listing of the environment in which the program executed. This will show others what packages were loaded and their version. If you use the `RNG=TRUE` option, the random number generators are also reported, more on this in @sec-random.

For this session, the info is as follows:

```{r}
sinfo <- sessionInfo()
print(sinfo,RNG=T)
```

You can drill down into the details of the information, for example,

```{r}
sinfo$loadedOnly$rmarkdown
```

### LaTeX ($\LaTeX$)

$\LaTeX$ (pronounced "LAY-tek" or "LAH-tek") is a high-quality typesetting system; it includes features designed for the production of technical and scientific documents. $\LaTeX$ is the de facto standard for the communication and publication of scientific documents and is available for free from [here](http://latex-project.org).

If you are working in mathematics or statistics, you will be producing $\LaTeX$ documents. You can write equations with other authoring tools as well---even the Microsoft Equation Editor has improved greatly over the years, in part because it now accepts $\LaTeX$ syntax! $\LaTeX$ is not a WYSIWYG---what you see is what you get---environment. Instead, you write a plain text file where text is interspersed with $\LaTeX$ commands. The document is processed ("compiled") into an output file (usually pdf) by running it through a TeX engine. In other words, you focus on writing the contents of the document with $\LaTeX$ commands and let the Tex engine take care of typesetting the commands into a professional document.

RStudio, Rmarkdown, and Quarto support $\LaTeX$ natively and this makes it very easy to combine text, code, and formulas. For example, to show the probability density function of a G(0,1) random variable in this Quarto document, I typed the $\LaTeX$ instructions

``` default
$$
f(y) = \frac{1}{\sqrt{2\pi\sigma^{2}}} \exp 
       \left\{ - \frac{1}{2\sigma^{2}}(y - \mu)^{2} \right\}
$$
```

in the editor. When the document is rendered, these instructions produce $$
f(y) = \frac{1}{\sqrt{2\pi\sigma^{2}}}\exp\left\{ - \frac{1}{2\sigma^{2}}(y - \mu)^{2} \right\}
$$

An introduction to basic $\LaTeX$ document structure, formatting, and typesetting follows in @sec-latex.

RStudio does not add a $\LaTeX$ system to your computer, so you need to do that yourself. If you are planning to use $\LaTeX$ outside of `R` and RStudio, I recommend installing a full distribution. If you just want to get by with the minimal $\LaTeX$ needed to add formulas to html and pdf files created from RStudio, then `tinytex` will suffice.

-   [MacTex](https://www.tug.org/mactex/): This $\LaTeX$ distribution contains everything you need for MacOS.

-   [MicTex](https://miktex.org/): For Windows, Linux, and MacOS

-   [Tex Live](https://www.tug.org/texlive/): A basic Tex distribution for Windows, Linux, and MacOS.

-   [TinyTex](https://yihui.org/tinytex/): A small $\LaTeX$ distribution based on Tex Live that works well with `R`. The `R` package `tinytex` provides helper functions to work with TinyTex from `R`/RStudio. If you want to use TinyTex in `R`, first install the `tinytex` package

``` default
install.packages("tinytex")
```

and then download and install TinyTex with

``` default
tinytex::install_tinytex()
```

By default, `install_tinytex()` will fail the install if another $\LaTeX$ distribution is detected (you can overwrite this behavior with the `force=` argument of the function).

You can check if RStudio/R uses tinytex by executing this command at the prompt:

```{r}
tinytex::is_tinytex()
```

To author pure $\LaTeX$ documents on MacOS, I use TexShop from the University of Oregon, available [here](https://pages.uoregon.edu/koch/texshop/). TexShop comes with a Tex Live distribution, so installing TexShop is one method of adding LaTeX to your system.

If you are new to $\LaTeX$, the online LaTeX editor [Overleaf](https://www.overleaf.com/learn) has excellent tutorials and documentation. For example, [this](https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes) $\LaTeX$ in 30-minutes tutorial.

When you use $\LaTeX$ commands in an Rmarkdown or Quarto document, you do not need to start the document with a preamble (`\documentclass()` ...) or wrap the commands into a `\begin{document}` `\end{document}` block. You can enter $\LaTeX$ commands immediately. The most important application of using $\LaTeX$ with `R` is to add mathematical expressions to your document.

## Getting Started with Python {#sec-getting-started-Python}

To get started with statistical programming in Python, you need the following:

1.  Access to a version of Python, typically installed on your computer

2.  A development environment to write, interpret, and execute Python code. This is frequently some form of notebook interface, for example Jupyter Notebook or Google Colab.

3.  A package management system to add/update/remove Python libraries on your system.

You can download any version of Python from [here](https://www.python.org/downloads/). The latest version as of this writing is Python 3.12.4. Some organizations still use Python 2; because of breaking changes between Python 2 and Python 3 they might not have updated to Python 3. Moving from Python 2 code to Python 3 is time consuming. Running Python 2 these days is a serious red flag. Python 2 has been [sunset](https://www.python.org/doc/sunset-python-2/) since January 1, 2020, meaning that there will be no bug fixes, not even for security bugs.

::: {.callout-tip collapse="true"}
It is a great question to ask a potential employer: what version of Python are you running and how do you manage your default stack of Python libraries?

It is very telling if they are still running Python 2 and have not upgraded to Python 3. This organization does not know how to handle **technical debt**---run like it is the plague.
:::

### `pyenv` Version Management

[pyenv](https://github.com/pyenv/pyenv) is a version management tool for Python. It makes it particularly easy to work with multiple Python versions on the same system. The Python ecosystem moves very quickly and you will find yourself in a situation where a particular library requires a different version of Python from the one installed. Running different Python kernels for different projects is an unfortunate reality for many Python developers. With `pyenv` you can install/uninstall Python versions, you can switch versions globally, per shell or locally (in certain directories), and create virtual environments.

The instructions to install pyenv on your system are [here](https://github.com/pyenv/pyenv?tab=readme-ov-file#installation). Pay attention to also update shell configurations when you install pyenv. For example, my system uses `zsh` and my `.zshrc` file contains the lines (straight from the GitHub documentation)

``` default
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
```

The most common pyenv commands I use are

-   `pyenv install` to install a Python version on the system. For example, `pyenv install 3.11.4` will install Python 3.11.4.

-   `pyenv version` to see the currently active version of Python

-   `pyenv local ...` to set a local (application-specific) version of Python, for example `pyenv local 3.9` makes Python 3.9 the version in the applications started from the current (local) directory. Similarly, `pyenv shell ...` sets the Python version for the shell instance and `pyenv global ...` sets the Python version globally. You see that the global version of Python can be different from the version active in a particular shell or a directory.

-   `pyenv --help` to get help for the pyenv commands

-   `pyenv help commnand_name` to get help for a specific pyenv command, for example `pyenv help local`

### Package Management

The most common management tools used with Python are `conda` and `pip`. The two are often seen as equivalent, but they serve different purposes. `pip` is a Python package manager, you use it to add/update/remove packages from your Python installation. `conda` is a **system** package manager that handles much more than Python libraries. You can manage entire development stacks with `conda`, but not with `pip`.

For example, to add `jupyter` to your system with `conda` use

``` default
conda install jupyter
```

and with `pip` use

``` default
pip install jupyter
```

There is a misconception that `conda` and `pip` cannot be used together on the same system. You can use them together, in fact a great way to manage your environment is to first install and set up `conda` for your project and to install the packages you need from `conda` channels. With `conda` activated, you can use the version of `pip` that is included with `conda` to install any required `pip` dependencies. The important point is that once `conda` is activated, you use **its** version of `pip`.

Check

``` default
which pip
```

to see which version of `pip` will be called.

I personally use `pip` to manage Python packages, but it is not without issues. Managing the dependencies between Python libraries is a special kind of suffering. You install a new package A that happens to have a dependency on an earlier version of package B, which it downgrades upon installation to the earlier version. This can break code that depends on the newer version of package B. Once you realize this you upgrade B to the newer version, making A fail.
